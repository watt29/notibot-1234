# -*- coding: utf-8 -*-
"""
Smart Helper for Contact Management
‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import re
from linebot.v3.messaging import QuickReply, QuickReplyItem, MessageAction

def detect_incomplete_command(text):
    """Detect incomplete commands and suggest completion"""
    text = text.lower().strip()
    
    suggestions = []
    
    # Check for incomplete add commands
    if text in ["add_phone", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå"]:
        return {
            "type": "incomplete_add",
            "message": "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\nüí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£\nüî§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678",
            "suggestions": ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏î‡∏≤‡∏ß 089-999-8888"]
        }
    
    # Check for incomplete search commands
    if text in ["search_phone", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏´‡∏≤"]:
        return {
            "type": "incomplete_search", 
            "message": "üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n\nüí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢\n‚Ä¢ ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 081\n‚Ä¢ ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥: ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081",
            "suggestions": ["‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 081", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì"]
        }
    
    return None

def suggest_phone_format(phone_text):
    """Suggest proper phone number format"""
    if not phone_text:
        return None
        
    # Remove all non-digits
    digits_only = re.sub(r'\D', '', phone_text)
    
    # Check if it looks like a phone number attempt
    if len(digits_only) >= 8:
        if len(digits_only) == 10 and digits_only.startswith('0'):
            # Format Thai phone number
            formatted = f"{digits_only[:3]}-{digits_only[3:6]}-{digits_only[6:]}"
            return {
                "original": phone_text,
                "formatted": formatted,
                "message": f"üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {formatted}"
            }
        elif len(digits_only) == 9 and digits_only.startswith('0'):
            # Landline format
            formatted = f"{digits_only[:2]}-{digits_only[2:5]}-{digits_only[5:]}"
            return {
                "original": phone_text,
                "formatted": formatted, 
                "message": f"üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {formatted}"
            }
    
    return None

def create_smart_suggestions(context, recent_contacts=None):
    """Create smart suggestions based on context"""
    suggestions = []
    
    if context == "add_contact":
        suggestions = [
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678",
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏î‡∏≤‡∏ß 089-999-8888", 
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà 02-123-4567"
        ]
    elif context == "search_contact":
        if recent_contacts:
            # Use recent contact names as suggestions
            suggestions = [f"‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå {contact['name']}" for contact in recent_contacts[:3]]
        else:
            suggestions = ["‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 081", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì"]
    
    return suggestions

def create_suggestion_quick_reply(suggestions):
    """Create quick reply with suggestions"""
    items = []
    for i, suggestion in enumerate(suggestions[:10]):  # Limit to 10 items
        items.append(QuickReplyItem(
            action=MessageAction(label=f"üí° {suggestion[:20]}...", text=suggestion)
        ))
    
    # Add cancel option
    items.append(QuickReplyItem(
        action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")
    ))
    
    return QuickReply(items=items)

def analyze_user_intent(text):
    """Analyze user intent from natural language"""
    text = text.lower().strip()
    
    # Contact-related keywords
    contact_keywords = ["‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ä‡∏∑‡πà‡∏≠", "‡πÇ‡∏ó‡∏£", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Ñ‡∏ô", "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"]
    action_keywords = {
        "add": ["‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "‡πÄ‡∏Å‡πá‡∏ö", "‡πÉ‡∏™‡πà", "‡πÄ‡∏ã‡∏ü"],
        "search": ["‡∏´‡∏≤", "‡∏Ñ‡πâ‡∏ô", "‡∏î‡∏π", "‡πÄ‡∏ä‡πá‡∏Ñ", "‡∏ï‡∏£‡∏ß‡∏à"],
        "delete": ["‡∏•‡∏ö", "‡∏•‡∏ö‡∏≠‡∏≠‡∏Å", "‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å", "‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤"],
        "list": ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏•‡∏¥‡∏™‡∏ï‡πå", "‡πÅ‡∏™‡∏î‡∏á"]
    }
    
    intent = {
        "action": None,
        "confidence": 0,
        "context": "contact" if any(keyword in text for keyword in contact_keywords) else "general"
    }
    
    # Check for action keywords
    for action, keywords in action_keywords.items():
        if any(keyword in text for keyword in keywords):
            intent["action"] = action
            intent["confidence"] = 0.8
            break
    
    return intent

def format_error_message(error_type, details=None):
    """Format user-friendly error messages"""
    messages = {
        "invalid_phone": "‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüí° ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏ó‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å\nüî§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678",
        "missing_name": "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢\n\nüí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
        "not_found": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢:\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•\n‚Ä¢ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô\n‚Ä¢ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏î‡πâ",
        "duplicate": "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡∏π‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞",
        "no_permission": "üîí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin\n\nüí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô:\n‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå\n‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå"
    }
    
    message = messages.get(error_type, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
    
    if details:
        message += f"\n\nüìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {details}"
    
    return message