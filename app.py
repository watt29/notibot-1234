# -*- coding: utf-8 -*-
# NUCLEAR FORCE REBUILD: 2025-08-09T14:17 - Cache clear emergency
from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, ReplyMessageRequest,
    TextMessage, FlexMessage, FlexContainer, QuickReply, QuickReplyItem,
    MessageAction, PushMessageRequest
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent, FollowEvent
from datetime import datetime, date, timedelta
import os
from supabase import create_client, Client
import re
import time
from dotenv import load_dotenv
import tempfile

# Load environment variables first
load_dotenv()

from contact_management import (
    validate_phone_number, search_contacts_multi_keyword, add_contact, 
    edit_contact, delete_contact, get_all_contacts, export_contacts_to_excel,
    create_contact_flex_message, search_contacts_by_category, get_contacts_stats,
    bulk_search_contacts
)
# Contact management helper functions (inline to avoid circular imports)
def convert_thai_to_english_command(text):
    """Convert Thai natural language to English commands"""
    text = text.lower().strip()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå commands
    add_patterns = ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠", "‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå"]
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ commands  
    search_patterns = ["‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á", "‡∏ä‡∏∑‡πà‡∏≠", "‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏´‡∏≤"]
    
    # Check if it's an add command
    for pattern in add_patterns:
        if text.startswith(pattern):
            remaining = text.replace(pattern, "").strip()
            if remaining:
                return f"add_phone {remaining}"
            else:
                return "add_phone "
    
    # Check if it's a search command
    for pattern in search_patterns:
        if text.startswith(pattern):
            remaining = text.replace(pattern, "").strip()
            if remaining:
                return f"search_phone {remaining}"
            else:
                return "search_phone "
    
    return text

def detect_incomplete_command(text):
    """Detect incomplete commands and suggest completion"""
    text = text.lower().strip()
    
    # Check for incomplete add commands
    if text in ["add_phone", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå"]:
        return {
            "type": "incomplete_add",
            "message": "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\nüí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£\nüî§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678",
            "suggestions": ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏î‡∏≤‡∏ß 089-999-8888"]
        }
    
    # Check for incomplete search commands
    if text in ["search_phone", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏´‡∏≤"]:
        return {
            "type": "incomplete_search", 
            "message": "üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏à‡∏µ‡∏£‡∏ß‡∏±‡∏í‡∏ô‡πå\n‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 093",
            "suggestions": ["‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏à‡∏µ‡∏£‡∏ß‡∏±‡∏í‡∏ô‡πå", "‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 093", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]
        }
    
    return None

def create_contact_quick_reply():
    """Create quick reply for contact management"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üìû ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", text="‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_smart_search_quick_reply():
    """Create smart search quick reply for large datasets"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå mobile")),
        QuickReplyItem(action=MessageAction(label="‚òéÔ∏è ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå landline")),
        QuickReplyItem(action=MessageAction(label="üïê ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå recent")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå "))
    ])

def handle_add_contact_simple(data, event, user_id):
    """Handle add contact with simple interface"""
    parts = data.strip().split()
    
    if len(parts) < 2:
        error_msg = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö\n\nüí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£\nüî§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678"
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678")),
            QuickReplyItem(action=MessageAction(label="üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏î‡∏≤‡∏ß 089-999-8888", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏î‡∏≤‡∏ß 089-999-8888"))
        ])
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=error_msg, quick_reply=quick_reply)]
            )
        )
        return
    
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    phone = parts[-1]  # ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    name = " ".join(parts[:-1])  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    
    result = add_contact(name, phone, user_id)
    
    if result["success"]:
        contact_data = result["data"]
        success_msg = f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n\nüìù ‡∏ä‡∏∑‡πà‡∏≠: {contact_data['name']}\nüìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {contact_data['phone_number']}\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡∏π: ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå {name}"
        quick_reply = create_contact_quick_reply()
    else:
        success_msg = f"‚ùå {result['error']}\n\nüí° ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        quick_reply = create_contact_quick_reply()
    
    safe_line_api_call(line_bot_api.reply_message,
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[TextMessage(text=success_msg, quick_reply=quick_reply)]
        )
    )

def handle_search_contact_simple(query, event):
    """Handle search with simple interface using optimized bulk search"""
    contacts = bulk_search_contacts(query, limit=50)
    
    if not contacts:
        error_msg = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        quick_reply = create_contact_quick_reply()
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=error_msg, quick_reply=quick_reply)]
            )
        )
        return
    
    if len(contacts) == 1:
        # Single result - show detailed
        contact = contacts[0]
        flex_content = create_contact_flex_message(contact, is_single=True)
        flex_message = FlexMessage(alt_text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", contents=FlexContainer.from_dict(flex_content))
        
        success_msg = f"üéØ ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ({len(contacts)} ‡∏Ñ‡∏ô)"
        quick_reply = create_contact_quick_reply()
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message, TextMessage(text=success_msg, quick_reply=quick_reply)]
            )
        )
    else:
        # Multiple results - show carousel
        bubbles = [create_contact_flex_message(contact) for contact in contacts[:10]]
        carousel_content = {"type": "carousel", "contents": bubbles}
        flex_message = FlexMessage(alt_text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", contents=FlexContainer.from_dict(carousel_content))
        
        success_msg = f"üéØ ‡∏û‡∏ö {len(contacts)} ‡∏Ñ‡∏ô{' (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å)' if len(contacts) > 10 else ''}"
        quick_reply = create_contact_quick_reply()
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message, TextMessage(text=success_msg, quick_reply=quick_reply)]
            )
        )

app = Flask(__name__)

def safe_line_api_call(api_method, *args, max_retries=3, **kwargs):
    """Safely call LINE Bot API with retry logic for connection issues"""
    from urllib3.exceptions import ProtocolError
    
    for attempt in range(max_retries):
        try:
            return api_method(*args, **kwargs)
        except (ProtocolError, ConnectionResetError, ConnectionAbortedError) as e:
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 2  # 2, 4, 6 seconds
                app.logger.warning(f"LINE API connection error (attempt {attempt + 1}/{max_retries}): {e}. Retrying in {wait_time}s...")
                time.sleep(wait_time)
                continue
            else:
                app.logger.error(f"LINE API failed after {max_retries} attempts: {e}")
                raise e
        except Exception as e:
            # Log other unexpected errors but don't retry
            app.logger.error(f"Unexpected LINE API error: {e}")
            raise e

# Supabase setup
supabase_url = os.getenv('SUPABASE_URL')
supabase_key = os.getenv('SUPABASE_SERVICE_KEY')  # Use service role key for full permissions
supabase_client: Client = create_client(supabase_url, supabase_key)

# Simple in-memory storage for user states (in production, use Redis or database)
user_states = {}

# Get LINE Channel Access Token and Channel Secret from environment variables
configuration = Configuration(access_token=os.getenv('LINE_CHANNEL_ACCESS_TOKEN'))
handler = WebhookHandler(os.getenv('LINE_CHANNEL_SECRET'))
admin_ids = os.getenv('ADMIN_IDS', '').split(',') if os.getenv('ADMIN_IDS') else []

# Initialize LINE Bot API
line_bot_api = MessagingApi(ApiClient(configuration))

# ==================== CONTACT MANAGEMENT FUNCTIONS ====================
# Functions imported from contact_management.py

def is_admin_user(user_id):
    """Check if user is admin"""
    return user_id in admin_ids

# ==================== END CONTACT MANAGEMENT ====================

def format_thai_date(date_str):
    """Convert date string to Thai format"""
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
        thai_months = [
            '', '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
            '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
        ]
        return f"{date_obj.day} {thai_months[date_obj.month]} {date_obj.year + 543}"
    except:
        return date_str

def create_event_flex_message(event_data, is_admin=False):
    """Create Flex Message for a single event using Supabase data structure"""
    
    # Format the date for display
    formatted_date = format_thai_date(event_data.get('event_date', ''))
    event_id = event_data.get('id', '')
    
    flex_message_content = {
        "type": "bubble",
        "size": "mega",
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "text",
                    "text": event_data.get('event_title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'),
                    "wrap": True,
                    "weight": "bold",
                    "size": "lg",
                    "color": "#1DB446"
                },
                {
                    "type": "separator",
                    "margin": "md"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "margin": "md",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "üÜî",
                                    "size": "sm",
                                    "flex": 0
                                },
                                {
                                    "type": "text",
                                    "text": f"ID: {event_id}",
                                    "size": "sm",
                                    "color": "#999999",
                                    "margin": "sm"
                                }
                            ]
                        } if is_admin else None,
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": "üìÖ",
                                    "size": "sm",
                                    "flex": 0
                                },
                                {
                                    "type": "text",
                                    "text": f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {formatted_date}",
                                    "size": "sm",
                                    "color": "#666666",
                                    "wrap": True,
                                    "margin": "sm"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
    
    # Filter out None items
    flex_message_content["body"]["contents"][-1]["contents"] = [
        item for item in flex_message_content["body"]["contents"][-1]["contents"] if item is not None
    ]
    
    # Add description if available
    if event_data.get('event_description'):
        description_box = {
            "type": "box",
            "layout": "horizontal",
            "margin": "sm",
            "contents": [
                {
                    "type": "text",
                    "text": "üìù",
                    "size": "sm",
                    "flex": 0
                },
                {
                    "type": "text",
                    "text": event_data.get('event_description'),
                    "size": "sm",
                    "color": "#444444",
                    "wrap": True,
                    "margin": "sm"
                }
            ]
        }
        flex_message_content["body"]["contents"][-1]["contents"].append(description_box)
    
    # Add admin buttons if user is admin
    if is_admin:
        flex_message_content["footer"] = {
            "type": "box",
            "layout": "horizontal",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "secondary",
                    "height": "sm",
                    "action": {
                        "type": "message",
                        "label": "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
                        "text": f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {event_id}"
                    }
                },
                {
                    "type": "button",
                    "style": "secondary",
                    "height": "sm",
                    "color": "#ff6b6b",
                    "action": {
                        "type": "message",
                        "label": "üóëÔ∏è ‡∏•‡∏ö",
                        "text": f"‡∏•‡∏ö {event_id}"
                    }
                }
            ]
        }
    
    return flex_message_content

def get_single_flex_message(event_data, is_admin=False):
    flex_message_content = create_event_flex_message(event_data, is_admin)
    return FlexMessage(alt_text="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", contents=FlexContainer.from_dict(flex_message_content))

def create_events_carousel_message(events_list, is_admin=False, page=1, total_events=None):
    # Limit to 10 events per carousel (LINE limit is 12)
    max_per_page = 10
    start_idx = (page - 1) * max_per_page
    end_idx = start_idx + max_per_page
    page_events = events_list[start_idx:end_idx]
    
    bubbles = []
    for event_data in page_events:
        bubble_content = create_event_flex_message(event_data, is_admin)
        bubbles.append(bubble_content)
    
    carousel_content = {
        "type": "carousel",
        "contents": bubbles
    }
    
    return FlexMessage(alt_text=f"‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ô‡πâ‡∏≤ {page}", contents=FlexContainer.from_dict(carousel_content))

def create_pagination_quick_reply(page, total_pages, command_prefix="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"):
    """Create pagination quick reply buttons"""
    items = []
    
    if page > 1:
        items.append(QuickReplyItem(action=MessageAction(label="‚óÄÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", text=f"{command_prefix} {page-1}")))
    
    items.append(QuickReplyItem(action=MessageAction(label=f"üìÑ {page}/{total_pages}", text=f"{command_prefix} 1")))
    
    if page < total_pages:
        items.append(QuickReplyItem(action=MessageAction(label="‚ñ∂Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text=f"{command_prefix} {page+1}")))
    
    items.append(QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")))
    
    return QuickReply(items=items)

def create_main_quick_reply():
    """Create main menu quick reply buttons - Modern, intuitive design"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üéØ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", text="/today")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", text="/search")),
        QuickReplyItem(action=MessageAction(label="üìû ‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="üìÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")),
        QuickReplyItem(action=MessageAction(label="üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
        QuickReplyItem(action=MessageAction(label="üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", text="help"))
    ])

def create_admin_quick_reply():
    """Create admin menu quick reply buttons - Organized and streamlined"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")),
        QuickReplyItem(action=MessageAction(label="‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", text="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="/contacts")),
        QuickReplyItem(action=MessageAction(label="üì¢ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", text="‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", text="admin_reports")),
        QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_delete_confirm_quick_reply(event_id):
    """Create delete confirmation quick reply buttons"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö", text=f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö {event_id}")),
        QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")),
        QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_date_quick_reply():
    """Create quick date selection buttons"""
    today = date.today()
    dates = []
    for i in range(11):  # Next 11 days (maximum for Quick Reply limit)
        future_date = today + timedelta(days=i)
        label = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" if i == 0 else f"{future_date.day}/{future_date.month}"
        dates.append(QuickReplyItem(action=MessageAction(label=label, text=str(future_date))))
    
    dates.append(QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô", text="‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô")))
    dates.append(QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")))
    
    return QuickReply(items=dates)

def create_cancel_quick_reply():
    """Create cancel operation quick reply"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")),
        QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_comprehensive_quick_reply():
    """Create comprehensive quick reply with all main features"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", text="/today")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", text="/search")),
        QuickReplyItem(action=MessageAction(label="üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", text="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")),
        QuickReplyItem(action=MessageAction(label="üí° Help", text="help")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_event_quick_reply():
    """Create event-focused quick reply menu"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", text="/today")),
        QuickReplyItem(action=MessageAction(label="üîú ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="/next")),
        QuickReplyItem(action=MessageAction(label="üìÜ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", text="/month")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", text="/search")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_compact_contact_quick_reply():
    """Create compact contact management menu"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏´‡∏≤", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", text="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå mobile")),
        QuickReplyItem(action=MessageAction(label="‚òéÔ∏è ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå landline")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_all_commands_quick_reply():
    """Create comprehensive quick reply for ALL system commands"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", text="/today")),
        QuickReplyItem(action=MessageAction(label="üîú ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="/next")),
        QuickReplyItem(action=MessageAction(label="üìÜ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", text="/month")),
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", text="/search")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")),
        QuickReplyItem(action=MessageAction(label="üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", text="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="üí° Help", text="help")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")),
        QuickReplyItem(action=MessageAction(label="üîî ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°", text="/subscribe")),
        QuickReplyItem(action=MessageAction(label="‚öôÔ∏è Admin", text="/admin"))
    ])

def create_search_commands_quick_reply():
    """Quick reply for all search-related commands"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üîç ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", text="/search")),
        QuickReplyItem(action=MessageAction(label="üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")),
        QuickReplyItem(action=MessageAction(label="üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå mobile")),
        QuickReplyItem(action=MessageAction(label="‚òéÔ∏è ‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå landline")),
        QuickReplyItem(action=MessageAction(label="üïê ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå recent")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_admin_all_commands_quick_reply():
    """Quick reply for ALL admin commands"""
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")),
        QuickReplyItem(action=MessageAction(label="‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", text="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")),
        QuickReplyItem(action=MessageAction(label="üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", text="‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", text="/list")),
        QuickReplyItem(action=MessageAction(label="üìû ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå", text="/contacts")),
        QuickReplyItem(action=MessageAction(label="üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", text="‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå")),
        QuickReplyItem(action=MessageAction(label="üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", text="admin_reports")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def create_date_commands_quick_reply():
    """Quick reply for date-related commands"""  
    return QuickReply(items=[
        QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", text="/today")),
        QuickReplyItem(action=MessageAction(label="üîú ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="/next")),
        QuickReplyItem(action=MessageAction(label="üìÜ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", text="/month")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10")),
        QuickReplyItem(action=MessageAction(label="üìã ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20", text="‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20")),
        QuickReplyItem(action=MessageAction(label="üè† ‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
    ])

def send_automatic_notifications():
    """Send automatic notifications for events happening today or tomorrow"""
    try:
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        # Get events for today and tomorrow
        events_today = supabase_client.table('events').select('*').eq('event_date', str(today)).execute()
        events_tomorrow = supabase_client.table('events').select('*').eq('event_date', str(tomorrow)).execute()
        
        # Get all subscribers
        subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
        if not subscribers_response.data:
            return {"status": "no_subscribers", "message": "No subscribers found"}
        
        notifications_sent = 0
        
        # Send notifications for today's events
        if events_today.data:
            for event in events_today.data:
                formatted_date = format_thai_date(event.get('event_date', ''))
                message = f"""üîî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!

üìù **{event.get('event_title', '')}**
üìã {event.get('event_description', '')}
üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {formatted_date} (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)

‚è∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!

üì≤ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
                
                for subscriber in subscribers_response.data:
                    try:
                        safe_line_api_call(line_bot_api.push_message,
                            PushMessageRequest(
                                to=subscriber['user_id'],
                                messages=[TextMessage(text=message)]
                            )
                        )
                        notifications_sent += 1
                    except Exception as e:
                        app.logger.error(f"Failed to send today notification to {subscriber['user_id']}: {e}")
        
        # Send notifications for tomorrow's events
        if events_tomorrow.data:
            for event in events_tomorrow.data:
                formatted_date = format_thai_date(event.get('event_date', ''))
                message = f"""üîî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!

üìù **{event.get('event_title', '')}**
üìã {event.get('event_description', '')}
üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {formatted_date} (‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)

‚è∞ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏ß‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!

üì≤ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
                
                for subscriber in subscribers_response.data:
                    try:
                        safe_line_api_call(line_bot_api.push_message,
                            PushMessageRequest(
                                to=subscriber['user_id'],
                                messages=[TextMessage(text=message)]
                            )
                        )
                        notifications_sent += 1
                    except Exception as e:
                        app.logger.error(f"Failed to send tomorrow notification to {subscriber['user_id']}: {e}")
        
        return {
            "status": "success", 
            "notifications_sent": notifications_sent,
            "events_today": len(events_today.data) if events_today.data else 0,
            "events_tomorrow": len(events_tomorrow.data) if events_tomorrow.data else 0,
            "subscribers": len(subscribers_response.data)
        }
        
    except Exception as e:
        app.logger.error(f"Error in automatic notifications: {e}")
        return {"status": "error", "message": str(e)}

@app.route("/")
def health_check():
    """Health check endpoint for monitoring services"""
    return {"status": "ok", "service": "LINE Bot Event Notification System", "version": "v3.9-import-fix"}, 200

@app.route("/send-notifications", methods=['GET', 'POST'])
def trigger_notifications():
    """Endpoint to trigger automatic notifications - can be called by scheduler"""
    result = send_automatic_notifications()
    return result, 200

@app.route("/force-restart", methods=['POST'])
def force_restart():
    """Emergency endpoint to force application restart - helps with deployment issues"""
    import os
    import sys
    
    app.logger.info("Force restart requested - triggering application restart")
    
    # In production, this will cause the container to restart
    os.execv(sys.executable, ['python'] + sys.argv)
    
    return {"status": "restarting", "message": "Application restart initiated"}, 200

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

@handler.add(FollowEvent)
def handle_follow(event):
    """Handle when user follows the bot"""
    welcome_message = TextMessage(
        text="üöÄ **‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!**\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ\n\n‚ú® **‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì:**\nüéØ ‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç\nüìû ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞\nüì¢ ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\nüöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!**",
        quick_reply=create_main_quick_reply()
    )
    safe_line_api_call(line_bot_api.reply_message,
        ReplyMessageRequest(reply_token=event.reply_token, messages=[welcome_message])
    )

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    text = event.message.text
    if text == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ":
        message = TextMessage(
            text="üëã **‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!**\n\nü§ñ **LINE Bot ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á**\nüìÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\nüìû ‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞\n\nüí° **‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á**",
            quick_reply=create_main_quick_reply()
        )
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(reply_token=event.reply_token, messages=[message])
        )
        return
    elif text.startswith("‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"):
        try:
            # Parse page number if provided
            parts = text.split()
            page = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 1
            
            response = supabase_client.table('events').select('*').order('event_date', desc=False).execute()
            events = response.data

            if events:
                is_admin = event.source.user_id in admin_ids
                total_events = len(events)
                max_per_page = 10
                total_pages = (total_events + max_per_page - 1) // max_per_page  # Ceiling division
                
                if total_pages > 1:
                    flex_message = create_events_carousel_message(events, is_admin, page)
                    pagination_reply = create_pagination_quick_reply(page, total_pages, "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                    status_text = f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤ {page}/{total_pages} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_events} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)"
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[flex_message, TextMessage(text=status_text, quick_reply=pagination_reply)]
                        )
                    )
                else:
                    flex_message = create_events_carousel_message(events, is_admin)
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[flex_message, TextMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_main_quick_reply())]
                        )
                    )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏Ñ‡πà‡∏∞", quick_reply=create_main_quick_reply())]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error fetching events from Supabase: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", quick_reply=create_main_quick_reply())]
                )
            )
        return
    elif text == "/subscribe":
        user_id = event.source.user_id
        try:
            # Check if user is already subscribed
            response = supabase_client.table('subscribers').select('user_id').eq('user_id', user_id).execute()
            if response.data:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞", quick_reply=create_main_quick_reply())]
                    )
                )
            else:
                # Add user to subscribers table
                supabase_client.table('subscribers').insert({'user_id': user_id}).execute()
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞", quick_reply=create_main_quick_reply())]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error subscribing user: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", quick_reply=create_main_quick_reply())]
                )
            )
        return
    elif text.startswith("/add "):
        user_id = event.source.user_id
        if user_id not in admin_ids:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡πà‡∏∞")]
                )
            )
            return

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /add title | desc | date ‡∏´‡∏£‡∏∑‡∏≠ /add title desc date
        content = text[len("/add "):].strip()
        
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ | ‡∏Å‡πà‡∏≠‡∏ô
        if ' | ' in content:
            parts = content.split(' | ', 2)
        else:
            # ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            words = content.split()
            if len(words) >= 3:
                # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
                date_pattern = r'\d{4}-\d{2}-\d{2}'
                date_matches = []
                for i, word in enumerate(words):
                    if re.match(date_pattern, word):
                        date_matches.append((i, word))
                
                if date_matches:
                    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
                    date_index, date_str = date_matches[0]
                    title_desc_words = words[:date_index] + words[date_index+1:]
                    
                    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö title ‡πÅ‡∏•‡∏∞ description
                    mid = len(title_desc_words) // 2
                    if mid == 0:
                        parts = [' '.join(title_desc_words), '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', date_str]
                    else:
                        parts = [
                            ' '.join(title_desc_words[:mid]),
                            ' '.join(title_desc_words[mid:]),
                            date_str
                        ]
                else:
                    # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    if len(words) >= 3:
                        parts = [
                            ' '.join(words[:-2]),
                            words[-2],
                            words[-1]
                        ]
                    else:
                        parts = words
            else:
                parts = words

        if len(parts) < 3:
            help_text = """üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:

‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢:
/add ‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡∏≥‡∏£‡∏ß‡∏à ‡∏ú‡∏Å‡∏Å.‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏õ‡∏∑‡∏ô 2025-08-08

‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:  
/add ‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡∏≥‡∏£‡∏ß‡∏à | ‡∏ú‡∏Å‡∏Å.‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏õ‡∏∑‡∏ô | 2025-08-08

‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå:
‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡∏≥‡∏£‡∏ß‡∏à | ‡∏ú‡∏Å‡∏Å.‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏õ‡∏∑‡∏ô | 2025-08-08"""
            
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=help_text, quick_reply=create_admin_quick_reply())]
                )
            )
            return

        event_title = parts[0].strip()
        event_description = parts[1].strip() if len(parts) > 1 else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
        event_date_str = parts[2].strip() if len(parts) > 2 else parts[-1].strip()

        try:
            event_date = datetime.strptime(event_date_str, '%Y-%m-%d').date()
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD", quick_reply=create_admin_quick_reply())]
                )
            )
            return

        try:
            # Log parsing results for debugging
            app.logger.info(f"Parsed event - Title: '{event_title}', Desc: '{event_description}', Date: '{event_date}'")
            
            response = supabase_client.table('events').insert({
                'event_title': event_title,
                'event_description': event_description,
                'event_date': str(event_date),
                'created_by': user_id
            }).execute()
            
            app.logger.info(f"Supabase response: {response}")
            
            if response.data and len(response.data) > 0:
                event_id = response.data[0]['id']
                success_text = f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìù {event_title}\nüìã {event_description}\nüìÖ {format_thai_date(str(event_date))}\nüÜî ID: {event_id}"
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                    )
                )
            else:
                app.logger.error(f"Supabase returned no data: {response}")
                raise Exception("No data returned from Supabase insert.")

        except Exception as e:
            app.logger.error(f"Error adding event to Supabase: {e}")
            app.logger.error(f"Event data - Title: '{event_title}', Desc: '{event_description}', Date: '{event_date}'")
            
            # Return more specific error message
            error_msg = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:100]}\nTitle: {event_title}\nDescription: {event_description}\nDate: {event_date}"
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=error_msg, quick_reply=create_admin_quick_reply())]
                )
            )
            return
    elif text == "/today":
        try:
            today = date.today()
            response = supabase_client.table('events').select('*').eq('event_date', str(today)).execute()
            events = response.data

            if events:
                is_admin = event.source.user_id in admin_ids
                if len(events) == 1:
                    flex_message = get_single_flex_message(events[0], is_admin)
                else:
                    flex_message = create_events_carousel_message(events, is_admin)
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[flex_message, TextMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_main_quick_reply())]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(
                            text="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏Ñ‡πà‡∏∞",
                            quick_reply=create_main_quick_reply()
                        )]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error fetching today's events: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(
                        text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        quick_reply=create_main_quick_reply()
                    )]
                )
            )
        return
    elif text == "/next":
        try:
            today = date.today()
            response = supabase_client.table('events').select('*').gte('event_date', str(today)).order('event_date', desc=False).limit(5).execute()
            events = response.data

            if events:
                is_admin = event.source.user_id in admin_ids
                if len(events) == 1:
                    flex_message = get_single_flex_message(events[0], is_admin)
                else:
                    flex_message = create_events_carousel_message(events, is_admin)
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[flex_message, TextMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_main_quick_reply())]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(
                            text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ñ‡πà‡∏∞",
                            quick_reply=create_main_quick_reply()
                        )]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error fetching upcoming events: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(
                        text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        quick_reply=create_main_quick_reply()
                    )]
                )
            )
        return
    elif text == "/month":
        try:
            today = date.today()
            start_of_month = today.replace(day=1)
            # Get last day of month
            if today.month == 12:
                end_of_month = date(today.year + 1, 1, 1) - timedelta(days=1)
            else:
                end_of_month = date(today.year, today.month + 1, 1) - timedelta(days=1)
            
            response = supabase_client.table('events').select('*').gte('event_date', str(start_of_month)).lte('event_date', str(end_of_month)).order('event_date', desc=False).execute()
            events = response.data

            if events:
                is_admin = event.source.user_id in admin_ids
                total_events = len(events)
                
                if len(events) == 1:
                    flex_message = get_single_flex_message(events[0], is_admin)
                elif total_events > 10:
                    flex_message = create_events_carousel_message(events, is_admin, 1)
                    total_pages = (total_events + 9) // 10
                    pagination_reply = create_pagination_quick_reply(1, total_pages, "/month")
                    status_text = f"üóìÔ∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {today.month}/{today.year} - ‡∏´‡∏ô‡πâ‡∏≤ 1/{total_pages} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_events} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)"
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[flex_message, TextMessage(text=status_text, quick_reply=pagination_reply)]
                        )
                    )
                    return
                else:
                    flex_message = create_events_carousel_message(events, is_admin)
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[flex_message, TextMessage(text=f"üóìÔ∏è ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {today.month}/{today.year} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", quick_reply=create_main_quick_reply())]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(
                            text=f"üóìÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {today.month}/{today.year}",
                            quick_reply=create_main_quick_reply()
                        )]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error fetching monthly events: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(
                        text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        quick_reply=create_main_quick_reply()
                    )]
                )
            )
        return
    elif text == "/admin" and event.source.user_id in admin_ids:
        admin_help_text = """üë®‚Äçüíº **Admin Panel**

üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°**
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 
‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
‚Ä¢ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

üìû **‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£**  
‚Ä¢ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå

‚ö° **‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=admin_help_text, quick_reply=create_admin_quick_reply())]
            )
        )
        return
    elif text == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" and event.source.user_id in admin_ids:
        # Start guided event creation
        user_states[event.source.user_id] = {"step": "waiting_title", "event_data": {}}
        
        guide_text = """üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1/3

üî∏ **‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡∏£‡∏ß‡∏à  
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏Å‡∏≥‡∏ô‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ö‡πâ‡∏≤‡∏ô

üí¨ ‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
            )
        )
        return
    elif text == "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" and event.source.user_id in admin_ids:
        try:
            # Log for debugging
            app.logger.info(f"Admin {event.source.user_id} requested event management")
            
            response = supabase_client.table('events').select('*').order('event_date', desc=False).execute()
            events = response.data
            
            app.logger.info(f"Found {len(events) if events else 0} events")
            
            if events and len(events) > 0:
                # Create Flex Messages for better management
                events_for_management = events[:10]  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                
                if len(events_for_management) == 1:
                    # Single event - show as single Flex Message with management buttons
                    flex_message = get_single_flex_message(events_for_management[0], is_admin=True)
                    status_text = f"üìã ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n\n‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ üóëÔ∏è ‡∏•‡∏ö ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô"
                else:
                    # Multiple events - show as carousel
                    flex_message = create_events_carousel_message(events_for_management, is_admin=True)
                    status_text = f"üìã ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ({len(events_for_management)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n\n‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ üóëÔ∏è ‡∏•‡∏ö ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô"
                
                if len(events) > 10:
                    status_text += f"\n\nüìÑ ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏à‡∏≤‡∏Å {len(events)} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[
                            flex_message,
                            TextMessage(text=status_text, quick_reply=create_admin_quick_reply())
                        ]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö\n\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", quick_reply=create_admin_quick_reply())]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error listing events for management: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö\n\nError: {str(e)[:100]}", quick_reply=create_admin_quick_reply())]
                )
            )
            return
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Non-Admin users ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
    elif text == "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°":
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n\n‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", quick_reply=create_main_quick_reply())]
            )
        )
        return
    elif text == "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" and event.source.user_id in admin_ids:
        # Start guided notification sending
        try:
            # Get subscriber count
            subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
            subscriber_count = len(subscribers_response.data) if subscribers_response.data else 0
            
            # Get upcoming events for quick notification options
            today = date.today()
            upcoming_response = supabase_client.table('events').select('*').gte('event_date', str(today)).order('event_date', desc=False).limit(5).execute()
            upcoming_events = upcoming_response.data if upcoming_response.data else []
            
            user_states[event.source.user_id] = {"step": "notify_menu"}
            
            # Create notification menu
            notify_menu = QuickReply(items=[
                QuickReplyItem(action=MessageAction(label="üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á", text="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")),
                QuickReplyItem(action=MessageAction(label="üìÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")),
                QuickReplyItem(action=MessageAction(label="ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", text="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")),
                QuickReplyItem(action=MessageAction(label="üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£", text="‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£")),
                QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
            ])
            
            guide_text = f"""üì¢ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£

üë• **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {subscriber_count} ‡∏Ñ‡∏ô
üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** {len(upcoming_events)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:**

‚Ä¢ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á** - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏á
‚Ä¢ **‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ** - ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
‚Ä¢ **ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥** - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
‚Ä¢ **‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£** - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
            
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=guide_text, quick_reply=notify_menu)]
                )
            )
        except Exception as e:
            app.logger.error(f"Error preparing notification menu: {e}")
            import traceback
            traceback.print_exc()
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n\nError: {str(e)}", quick_reply=create_admin_quick_reply())]
                )
            )
            return
    elif text == "/list" and event.source.user_id in admin_ids:
        try:
            response = supabase_client.table('events').select('*').order('event_date', desc=False).execute()
            events = response.data
            
            if events:
                event_list = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n"
                for event in events:
                    formatted_date = format_thai_date(event.get('event_date', ''))
                    event_list += f"üÜî ID: {event['id']}\n"
                    event_list += f"üìÖ {event.get('event_title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n"
                    event_list += f"üìù {event.get('event_description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')}\n"
                    event_list += f"üóìÔ∏è {formatted_date}\n"
                    event_list += "‚îÄ" * 30 + "\n\n"
                
                # Split long messages if needed
                if len(event_list) > 2000:
                    event_list = event_list[:1900] + "...\n\n‡πÉ‡∏ä‡πâ /admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=event_list)]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö")]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error listing events: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö")]
                )
            )
            return
    elif text.startswith("/edit ") and event.source.user_id in admin_ids:
        # Expected format: /edit [ID] | [title] | [description] | [date]
        parts = text[len("/edit "):].split(' | ', 3)
        if len(parts) != 4:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö\n‡πÉ‡∏ä‡πâ: /edit [ID] | ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà | ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà | YYYY-MM-DD")]
                )
            )
            return
        
        try:
            event_id = int(parts[0].strip())
            new_title = parts[1].strip()
            new_description = parts[2].strip()
            new_date_str = parts[3].strip()
            
            # Validate date format
            try:
                new_date = datetime.strptime(new_date_str, '%Y-%m-%d').date()
            except ValueError:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD")]
                    )
                )
                return
            
            # Update event in database
            response = supabase_client.table('events').update({
                'event_title': new_title,
                'event_description': new_description,
                'event_date': str(new_date)
            }).eq('id', event_id).execute()
            
            if response.data and len(response.data) > 0:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ")]
                    )
                )
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")]
                )
            )
        except Exception as e:
            app.logger.error(f"Error editing event: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö")]
                )
            )
            return
    elif text.startswith("/delete ") and event.source.user_id in admin_ids:
        # Expected format: /delete [ID]
        try:
            event_id_str = text[len("/delete "):].strip()
            event_id = int(event_id_str)
            
            # First get event details for confirmation
            get_response = supabase_client.table('events').select('*').eq('id', event_id).execute()
            
            if get_response.data and len(get_response.data) > 0:
                event_data = get_response.data[0]
                
                # Delete event from database
                delete_response = supabase_client.table('events').delete().eq('id', event_id).execute()
                
                if delete_response.data:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=f"üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n\nüìù {event_data.get('event_title', '')}\nüÜî ID: {event_id}")]
                        )
                    )
                else:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id} ‡πÑ‡∏î‡πâ")]
                        )
                    )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id}")]
                    )
                )
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")]
                )
            )
        except Exception as e:
            app.logger.error(f"Error deleting event: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö")]
                )
            )
            return
    elif text.startswith("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ") and event.source.user_id in admin_ids:
        # Handle "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ID" from Flex Message button
        try:
            event_id = int(text[len("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç "):].strip())
            
            # Get current event data
            response = supabase_client.table('events').select('*').eq('id', event_id).execute()
            if response.data and len(response.data) > 0:
                event_data = response.data[0]
                current_date = event_data.get('event_date', '2025-01-01')
                
                # Start guided edit flow - show selection menu
                user_states[event.source.user_id] = {
                    "step": "edit_menu", 
                    "event_id": event_id,
                    "current_data": event_data
                }
                
                # Create selection buttons for what to edit
                edit_menu = QuickReply(items=[
                    QuickReplyItem(action=MessageAction(label="üìù ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠", text="‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠")),
                    QuickReplyItem(action=MessageAction(label="üìã ‡πÅ‡∏Å‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", text="‡πÅ‡∏Å‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")),
                    QuickReplyItem(action=MessageAction(label="üìÖ ‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", text="‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")),
                    QuickReplyItem(action=MessageAction(label="üîÑ ‡πÅ‡∏Å‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÅ‡∏Å‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
                    QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
                ])
                
                guide_text = f"""‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id}

üìù **‡∏ä‡∏∑‡πà‡∏≠:** {event_data.get('event_title', '')}
üìã **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:** {event_data.get('event_description', '')}  
üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {format_thai_date(event_data.get('event_date', ''))}

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**"""
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=guide_text, quick_reply=edit_menu)]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id}", quick_reply=create_admin_quick_reply())]
                    )
                )
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
        except Exception as e:
            app.logger.error(f"Error handling edit request: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
            return
    elif text.startswith("‡∏•‡∏ö ") and event.source.user_id in admin_ids:
        # Handle "‡∏•‡∏ö ID" from Flex Message button
        try:
            event_id = int(text[len("‡∏•‡∏ö "):].strip())
            
            # Get event details for confirmation
            response = supabase_client.table('events').select('*').eq('id', event_id).execute()
            if response.data and len(response.data) > 0:
                event_data = response.data[0]
                
                confirm_text = f"""üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°?

üÜî ID: {event_id}
üìù {event_data.get('event_title', '')}
üìã {event_data.get('event_description', '')}
üìÖ {format_thai_date(event_data.get('event_date', ''))}

‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" """
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=confirm_text, quick_reply=create_delete_confirm_quick_reply(event_id))]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id}", quick_reply=create_admin_quick_reply())]
                    )
                )
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
        except Exception as e:
            app.logger.error(f"Error handling delete request: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
            return
    elif text.startswith("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö ") and event.source.user_id in admin_ids:
        # Handle "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö ID" from quick reply button - actually delete the event
        try:
            event_id = int(text[len("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö "):].strip())
            
            # Get event details before deleting
            get_response = supabase_client.table('events').select('*').eq('id', event_id).execute()
            
            if get_response.data and len(get_response.data) > 0:
                event_data = get_response.data[0]
                
                # Delete event from database
                delete_response = supabase_client.table('events').delete().eq('id', event_id).execute()
                
                if delete_response.data:
                    success_text = f"üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!\n\nüìù {event_data.get('event_title', '')}\nüÜî ID: {event_id}\n\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                        )
                    )
                else:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id} ‡πÑ‡∏î‡πâ", quick_reply=create_admin_quick_reply())]
                        )
                    )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ID: {event_id}", quick_reply=create_admin_quick_reply())]
                    )
                )
        except ValueError:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
        except Exception as e:
            app.logger.error(f"Error confirming delete: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                )
            )
            return
    else:
        user_id = event.source.user_id
        
        # Handle guided conversation flow for all users (admin and search)
        if user_id in user_states:
            state = user_states[user_id]
            
            # Search flow handlers (for all users)
            if state["step"] == "search_menu":
                selected_option = text.strip()
                
                if selected_option == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°":
                    state["step"] = "search_text_input"
                    state["search_type"] = "text"
                    
                    guide_text = """üìù ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

üî∏ **‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°  
‚Ä¢ ‡πÅ‡∏°‡πà
‚Ä¢ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":
                    state["step"] = "search_date_input"
                    state["search_type"] = "date"
                    
                    guide_text = """üìÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:**

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "üìÖ ‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå YYYY-MM-DD"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_date_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    state["step"] = "search_free_input"
                    state["search_type"] = "free"
                    
                    guide_text = """üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏™‡∏£‡∏∞

üí¨ **‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ:**

üìù ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥: ‡∏ö‡∏±‡∏ï‡∏£, ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°, ‡πÅ‡∏°‡πà
üìÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ, ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
üìÖ ‡∏´‡∏£‡∏∑‡∏≠: 2025-08-15, 2025-12-25
üî§ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏™‡∏°: ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ

‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                return
            
            elif state["step"] == "search_text_input":
                search_term = text.strip()
                del user_states[user_id]  # Clear state
                
                try:
                    # Search in title and description
                    response = supabase_client.table('events').select('*').or_(f"event_title.ilike.%{search_term}%,event_description.ilike.%{search_term}%").order('event_date', desc=False).execute()
                    events = response.data
                    
                    if events:
                        is_admin = user_id in admin_ids
                        total_events = len(events)
                        
                        if len(events) == 1:
                            flex_message = get_single_flex_message(events[0], is_admin)
                        elif total_events > 10:
                            flex_message = create_events_carousel_message(events, is_admin, 1)
                            total_pages = (total_events + 9) // 10
                            pagination_reply = create_pagination_quick_reply(1, total_pages, f"/search {search_term}")
                            status_text = f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_term}' - ‡∏´‡∏ô‡πâ‡∏≤ 1/{total_pages} (‡∏û‡∏ö {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)"
                            safe_line_api_call(line_bot_api.reply_message,
                                ReplyMessageRequest(
                                    reply_token=event.reply_token,
                                    messages=[flex_message, TextMessage(text=status_text, quick_reply=pagination_reply)]
                                )
                            )
                            return
                        else:
                            flex_message = create_events_carousel_message(events, is_admin)
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[flex_message, TextMessage(text=f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_term}' ‡∏û‡∏ö {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", quick_reply=create_main_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(
                                    text=f"üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '{search_term}'",
                                    quick_reply=create_main_quick_reply()
                                )]
                            )
                        )
                except Exception as e:
                    app.logger.error(f"Error in guided text search: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(
                                text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                                quick_reply=create_main_quick_reply()
                            )]
                        )
                    )
                return
            
            elif state["step"] == "search_date_input":
                selected_date = text.strip()
                
                # Handle "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" case
                if selected_date == "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô":
                    guide_text = """üìÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: **YYYY-MM-DD**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ 2025-08-15
‚Ä¢ 2025-09-01
‚Ä¢ 2025-12-25

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                del user_states[user_id]  # Clear state
                
                # Handle Thai date keywords first
                actual_date = None
                if selected_date.lower() in ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "today"]:
                    actual_date = str(date.today())
                elif selected_date.lower() in ["‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "tomorrow"]:
                    actual_date = str(date.today() + timedelta(days=1))
                elif selected_date.lower() in ["‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô", "yesterday"]:
                    actual_date = str(date.today() - timedelta(days=1))
                else:
                    # Validate date format
                    try:
                        parsed_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
                        actual_date = str(parsed_date)
                    except ValueError:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ, ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô\n‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠ YYYY-MM-DD (‡πÄ‡∏ä‡πà‡∏ô 2025-08-15)", quick_reply=create_main_quick_reply())]
                            )
                        )
                        return
                
                try:
                    response = supabase_client.table('events').select('*').eq('event_date', actual_date).execute()
                    events = response.data
                    
                    if events:
                        is_admin = user_id in admin_ids
                        total_events = len(events)
                        
                        if len(events) == 1:
                            flex_message = get_single_flex_message(events[0], is_admin)
                        else:
                            flex_message = create_events_carousel_message(events, is_admin)
                        
                        # Create friendly date display
                        if selected_date.lower() in ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "today"]:
                            date_display = f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({format_thai_date(actual_date)})"
                        elif selected_date.lower() in ["‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "tomorrow"]:
                            date_display = f"‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ({format_thai_date(actual_date)})"
                        elif selected_date.lower() in ["‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô", "yesterday"]:
                            date_display = f"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô ({format_thai_date(actual_date)})"
                        else:
                            date_display = format_thai_date(actual_date)
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[flex_message, TextMessage(text=f"üìÖ {date_display} ‡∏û‡∏ö {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", quick_reply=create_main_quick_reply())]
                            )
                        )
                    else:
                        # Create friendly date display for no results
                        if selected_date.lower() in ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "today"]:
                            date_display = f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({format_thai_date(actual_date)})"
                        elif selected_date.lower() in ["‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "tomorrow"]:
                            date_display = f"‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ({format_thai_date(actual_date)})"
                        elif selected_date.lower() in ["‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô", "yesterday"]:
                            date_display = f"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô ({format_thai_date(actual_date)})"
                        else:
                            date_display = format_thai_date(actual_date)
                            
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(
                                    text=f"üìÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô{date_display}",
                                    quick_reply=create_main_quick_reply()
                                )]
                            )
                        )
                except Exception as e:
                    app.logger.error(f"Error in guided date search: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(
                                text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                                quick_reply=create_main_quick_reply()
                            )]
                        )
                    )
                return
            
            elif state["step"] == "search_free_input":
                search_term = text.strip()
                del user_states[user_id]  # Clear state
                
                try:
                    # Handle Thai date keywords first
                    actual_search_term = search_term
                    if search_term.lower() in ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "today"]:
                        actual_search_term = str(date.today())
                    elif search_term.lower() in ["‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "tomorrow"]:
                        actual_search_term = str(date.today() + timedelta(days=1))
                    elif search_term.lower() in ["‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô", "yesterday"]:
                        actual_search_term = str(date.today() - timedelta(days=1))
                    
                    # Check if search term is a date (original or converted)
                    if re.match(r'\d{4}-\d{2}-\d{2}', actual_search_term):
                        response = supabase_client.table('events').select('*').eq('event_date', actual_search_term).execute()
                    else:
                        # Search in title and description
                        response = supabase_client.table('events').select('*').or_(f"event_title.ilike.%{actual_search_term}%,event_description.ilike.%{actual_search_term}%").order('event_date', desc=False).execute()
                    
                    events = response.data
                    
                    if events:
                        is_admin = user_id in admin_ids
                        total_events = len(events)
                        
                        if len(events) == 1:
                            flex_message = get_single_flex_message(events[0], is_admin)
                        elif total_events > 10:
                            flex_message = create_events_carousel_message(events, is_admin, 1)
                            total_pages = (total_events + 9) // 10
                            pagination_reply = create_pagination_quick_reply(1, total_pages, f"/search {search_term}")
                            status_text = f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_term}' - ‡∏´‡∏ô‡πâ‡∏≤ 1/{total_pages} (‡∏û‡∏ö {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)"
                            safe_line_api_call(line_bot_api.reply_message,
                                ReplyMessageRequest(
                                    reply_token=event.reply_token,
                                    messages=[flex_message, TextMessage(text=status_text, quick_reply=pagination_reply)]
                                )
                            )
                            return
                        else:
                            flex_message = create_events_carousel_message(events, is_admin)
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[flex_message, TextMessage(text=f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_term}' ‡∏û‡∏ö {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", quick_reply=create_main_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(
                                    text=f"üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '{search_term}'",
                                    quick_reply=create_main_quick_reply()
                                )]
                            )
                        )
                except Exception as e:
                    app.logger.error(f"Error in guided free search: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(
                                text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                                quick_reply=create_main_quick_reply()
                            )]
                        )
                    )
                return
            
            # Notification flow handlers (admin only)
            elif user_id in admin_ids and state["step"] == "notify_menu":
                selected_option = text.strip()
                
                if selected_option == "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á":
                    state["step"] = "notify_custom_input"
                    
                    guide_text = """üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á

üî∏ **‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ üîî ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!
‚Ä¢ ‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ù‡∏ô‡∏ï‡∏Å
‚Ä¢ üéâ ‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏°‡πà ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ":
                    # Get next upcoming event
                    try:
                        today = date.today()
                        response = supabase_client.table('events').select('*').gte('event_date', str(today)).order('event_date', desc=False).limit(1).execute()
                        
                        if response.data and len(response.data) > 0:
                            event_data = response.data[0]
                            formatted_date = format_thai_date(event_data.get('event_date', ''))
                            
                            notification_message = f"""üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Åÿ±‡∏£‡∏°

üìù **{event_data.get('event_title', '')}**
üìã {event_data.get('event_description', '')}
üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {formatted_date}

üì≤ ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"""
                            
                            # Send to all subscribers
                            subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
                            if subscribers_response.data:
                                sent_count = 0
                                failed_count = 0
                                
                                for subscriber in subscribers_response.data:
                                    try:
                                        safe_line_api_call(line_bot_api.push_message,
                                            PushMessageRequest(
                                                to=subscriber['user_id'],
                                                messages=[TextMessage(text=notification_message)]
                                            )
                                        )
                                        sent_count += 1
                                    except Exception as e:
                                        app.logger.error(f"Failed to send notification to {subscriber['user_id']}: {e}")
                                        failed_count += 1
                                
                                success_message = f"""üì¢ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìù **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** {event_data.get('event_title', '')}
‚úÖ **‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {sent_count} ‡∏Ñ‡∏ô
‚ùå **‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {failed_count} ‡∏Ñ‡∏ô

üìä **‡∏£‡∏ß‡∏°:** {sent_count + failed_count} ‡∏Ñ‡∏ô"""
                                
                                safe_line_api_call(line_bot_api.reply_message,
                                    ReplyMessageRequest(
                                        reply_token=event.reply_token,
                                        messages=[TextMessage(text=success_message, quick_reply=create_admin_quick_reply())]
                                    )
                                )
                            else:
                                safe_line_api_call(line_bot_api.reply_message,
                                    ReplyMessageRequest(
                                        reply_token=event.reply_token,
                                        messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", quick_reply=create_admin_quick_reply())]
                                    )
                                )
                        else:
                            safe_line_api_call(line_bot_api.reply_message,
                                ReplyMessageRequest(
                                    reply_token=event.reply_token,
                                    messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", quick_reply=create_admin_quick_reply())]
                                )
                            )
                        
                        del user_states[user_id]
                        return
                        
                    except Exception as e:
                        app.logger.error(f"Error sending event notification: {e}")
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", quick_reply=create_admin_quick_reply())]
                            )
                        )
                        del user_states[user_id]
                        return
                
                elif selected_option == "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥":
                    # Test automatic notification system
                    del user_states[user_id]
                    
                    try:
                        result = send_automatic_notifications()
                        
                        if result["status"] == "success":
                            success_message = f"""ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìä **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:**
‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: {result['notifications_sent']} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
üìÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {result['events_today']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
üìÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: {result['events_tomorrow']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£  
üë• ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {result['subscribers']} ‡∏Ñ‡∏ô

üí° **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠:
‚Ä¢ ‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 06:00 ‡∏ô.)
‚Ä¢ ‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 18:00 ‡∏ô.)

üîó **URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scheduler:**
https://notibot-1234.onrender.com/send-notifications"""
                            
                        elif result["status"] == "no_subscribers":
                            success_message = """ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

‚ùå **‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô**

üí° ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üîî ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"""
                            
                        else:
                            success_message = f"""ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:** {result.get('message', 'Unknown error')}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_message, quick_reply=create_admin_quick_reply())]
                            )
                        )
                        return
                        
                    except Exception as e:
                        app.logger.error(f"Error testing automatic notifications: {e}")
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", quick_reply=create_admin_quick_reply())]
                            )
                        )
                        return
                
                elif selected_option == "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£":
                    try:
                        # Get subscriber statistics
                        subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
                        subscriber_count = len(subscribers_response.data) if subscribers_response.data else 0
                        
                        # Get total events
                        events_response = supabase_client.table('events').select('id').execute()
                        total_events = len(events_response.data) if events_response.data else 0
                        
                        # Get upcoming events
                        today = date.today()
                        upcoming_response = supabase_client.table('events').select('id').gte('event_date', str(today)).execute()
                        upcoming_events = len(upcoming_response.data) if upcoming_response.data else 0
                        
                        stats_text = f"""üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

üë• **‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** {subscriber_count} ‡∏Ñ‡∏ô
üìã **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {total_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** {upcoming_events} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

üí° **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üîî ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£
‚Ä¢ Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=stats_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                        
                        del user_states[user_id]
                        return
                        
                    except Exception as e:
                        app.logger.error(f"Error getting subscriber stats: {e}")
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", quick_reply=create_admin_quick_reply())]
                            )
                        )
                        del user_states[user_id]
                        return
                
                return
            
            elif user_id in admin_ids and state["step"] == "notify_custom_input":
                custom_message = text.strip()
                del user_states[user_id]
                
                try:
                    # Send custom message to all subscribers
                    subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
                    
                    if subscribers_response.data:
                        sent_count = 0
                        failed_count = 0
                        
                        notification_text = f"""üì¢ {custom_message}

üì≤ ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"""
                        
                        for subscriber in subscribers_response.data:
                            try:
                                safe_line_api_call(line_bot_api.push_message,
                                    PushMessageRequest(
                                        to=subscriber['user_id'],
                                        messages=[TextMessage(text=notification_text)]
                                    )
                                )
                                sent_count += 1
                            except Exception as e:
                                app.logger.error(f"Failed to send custom notification to {subscriber['user_id']}: {e}")
                                failed_count += 1
                        
                        success_message = f"""üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üí¨ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:** {custom_message}
‚úÖ **‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {sent_count} ‡∏Ñ‡∏ô
‚ùå **‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {failed_count} ‡∏Ñ‡∏ô

üìä **‡∏£‡∏ß‡∏°:** {sent_count + failed_count} ‡∏Ñ‡∏ô"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_message, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    return
                    
                except Exception as e:
                    app.logger.error(f"Error sending custom notification: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    return
            
            # Admin-only flows
            elif user_id in admin_ids and state["step"] == "waiting_title":
                # Save title and ask for description
                state["event_data"]["title"] = text.strip()
                state["step"] = "waiting_description"
                
                guide_text = f"""üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2/3

‚úÖ ‡∏ä‡∏∑‡πà‡∏≠: {text.strip()}

üî∏ **‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ ‡∏ú‡∏Å‡∏Å. ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏õ‡∏∑‡∏ô
‚Ä¢ ‡∏´‡∏≤‡∏£‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô Q1 
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤ 08.30 ‡∏ô. ‡∏°‡∏≠‡∏ö ‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä 2 ‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä 5

üí¨ ‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                    )
                )
                return
                
            elif state["step"] == "waiting_description":
                # Save description and ask for date
                state["event_data"]["description"] = text.strip()
                state["step"] = "waiting_date"
                
                guide_text = f"""üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 3/3

‚úÖ ‡∏ä‡∏∑‡πà‡∏≠: {state["event_data"]["title"]}
‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {text.strip()}

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°**

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "üìÖ ‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå YYYY-MM-DD"""
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=guide_text, quick_reply=create_date_quick_reply())]
                    )
                )
                return
                
            elif state["step"] == "waiting_date":
                selected_date = text.strip()
                
                # Handle "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" case
                if selected_date == "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô":
                    guide_text = """üìÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: **YYYY-MM-DD**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ 2025-08-15
‚Ä¢ 2025-09-01
‚Ä¢ 2025-12-25

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                # Validate date format
                try:
                    event_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
                except ValueError:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD", quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                # Create event
                try:
                    response = supabase_client.table('events').insert({
                        'event_title': state["event_data"]["title"],
                        'event_description': state["event_data"]["description"],
                        'event_date': str(event_date),
                        'created_by': user_id
                    }).execute()
                    
                    if response.data and len(response.data) > 0:
                        event_id = response.data[0]['id']
                        success_text = f"""üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üÜî ID: {event_id}
üìù {state["event_data"]["title"]}
üìã {state["event_data"]["description"]}
üìÖ {format_thai_date(str(event_date))}

‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    # Clear user state
                    del user_states[user_id]
                    return
                    
                except Exception as e:
                    app.logger.error(f"Error creating event via guided flow: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    del user_states[user_id]
                    return
            
            # Edit menu handler
            elif state["step"] == "edit_menu":
                selected_option = text.strip()
                
                if selected_option == "‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠":
                    state["step"] = "edit_title_only"
                    state["edit_mode"] = "title_only"
                    
                    guide_text = f"""üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°

**‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {state["current_data"].get('event_title', '')}

üî∏ **‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:**

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡πÅ‡∏Å‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î":
                    state["step"] = "edit_description_only"
                    state["edit_mode"] = "description_only"
                    
                    guide_text = f"""üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°

**‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {state["current_data"].get('event_description', '')}

üî∏ **‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà:**

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":
                    state["step"] = "edit_date_only"
                    state["edit_mode"] = "date_only"
                    
                    current_date_str = state["current_data"].get('event_date', '')
                    
                    guide_text = f"""üìÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°

**‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {format_thai_date(current_date_str)}

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà:**

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_date_quick_reply())]
                        )
                    )
                    return
                
                elif selected_option == "‡πÅ‡∏Å‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    state["step"] = "edit_waiting_title"
                    state["edit_mode"] = "full_edit"
                    
                    guide_text = f"""‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1/3

üìù **‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {state["current_data"].get('event_title', '')}

üî∏ **‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà** ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°

üí¨ ‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                return
            
            # Single field edit handlers
            elif state["step"] == "edit_title_only":
                new_title = text.strip()
                
                try:
                    response = supabase_client.table('events').update({
                        'event_title': new_title
                    }).eq('id', state["event_id"]).execute()
                    
                    if response.data and len(response.data) > 0:
                        success_text = f"""üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üÜî ID: {state["event_id"]}
üìù **‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:** {new_title}
üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {state["current_data"].get('event_description', '')}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {format_thai_date(state["current_data"].get('event_date', ''))}

‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    del user_states[user_id]
                    return
                
                except Exception as e:
                    app.logger.error(f"Error editing title only: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    del user_states[user_id]
                    return
            
            elif state["step"] == "edit_description_only":
                new_description = text.strip()
                
                try:
                    response = supabase_client.table('events').update({
                        'event_description': new_description
                    }).eq('id', state["event_id"]).execute()
                    
                    if response.data and len(response.data) > 0:
                        success_text = f"""üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üÜî ID: {state["event_id"]}
üìù ‡∏ä‡∏∑‡πà‡∏≠: {state["current_data"].get('event_title', '')}
üìã **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà:** {new_description}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {format_thai_date(state["current_data"].get('event_date', ''))}

‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    del user_states[user_id]
                    return
                
                except Exception as e:
                    app.logger.error(f"Error editing description only: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    del user_states[user_id]
                    return
            
            elif state["step"] == "edit_date_only":
                selected_date = text.strip()
                
                # Handle "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" case
                if selected_date == "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô":
                    guide_text = """üìÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: **YYYY-MM-DD**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ 2025-08-15
‚Ä¢ 2025-09-01
‚Ä¢ 2025-12-25

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                # Validate date format
                try:
                    event_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
                    event_date_str = str(event_date)
                except ValueError:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD", quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                
                try:
                    response = supabase_client.table('events').update({
                        'event_date': event_date_str
                    }).eq('id', state["event_id"]).execute()
                    
                    if response.data and len(response.data) > 0:
                        success_text = f"""üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üÜî ID: {state["event_id"]}
üìù ‡∏ä‡∏∑‡πà‡∏≠: {state["current_data"].get('event_title', '')}
üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {state["current_data"].get('event_description', '')}
üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà:** {format_thai_date(event_date_str)}

‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    del user_states[user_id]
                    return
                
                except Exception as e:
                    app.logger.error(f"Error editing date only: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    del user_states[user_id]
                    return

            # Full edit flow handlers (original 3-step process)
            elif state["step"] == "edit_waiting_title":
                new_title = text.strip() if text.strip() != "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°" else state["current_data"]["event_title"]
                state["event_data"]["title"] = new_title
                state["step"] = "edit_waiting_description"
                
                guide_text = f"""‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2/3

‚úÖ ‡∏ä‡∏∑‡πà‡∏≠: {new_title}

üìã **‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {state["current_data"].get('event_description', '')}

üî∏ **‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà** ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°

üí¨ ‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                    )
                )
                return
                
            elif state["step"] == "edit_waiting_description":
                new_description = text.strip() if text.strip() != "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°" else state["current_data"]["event_description"]
                state["event_data"]["description"] = new_description
                state["step"] = "edit_waiting_date"
                
                # Add current date as first option
                current_date_str = state["current_data"].get('event_date', '')
                same_date_button = QuickReplyItem(action=MessageAction(label="üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°", text="‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°"))
                
                date_buttons = create_date_quick_reply()
                date_buttons.items.insert(0, same_date_button)
                
                guide_text = f"""‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 3/3

‚úÖ ‡∏ä‡∏∑‡πà‡∏≠: {state["event_data"]["title"]}
‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {new_description}

üìÖ **‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {format_thai_date(current_date_str)}

üî∏ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà** ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=guide_text, quick_reply=date_buttons)]
                    )
                )
                return
                
            elif state["step"] == "edit_waiting_date":
                selected_date = text.strip()
                
                if selected_date == "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°":
                    event_date_str = state["current_data"]["event_date"]
                elif selected_date == "‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô":
                    guide_text = """üìÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà

‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: **YYYY-MM-DD**

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
‚Ä¢ 2025-08-15
‚Ä¢ 2025-09-01
‚Ä¢ 2025-12-25

üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=guide_text, quick_reply=create_cancel_quick_reply())]
                        )
                    )
                    return
                else:
                    # Validate date format
                    try:
                        event_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
                        event_date_str = str(event_date)
                    except ValueError:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD", quick_reply=create_cancel_quick_reply())]
                            )
                        )
                        return
                
                # Update event
                try:
                    response = supabase_client.table('events').update({
                        'event_title': state["event_data"]["title"],
                        'event_description': state["event_data"]["description"],
                        'event_date': event_date_str
                    }).eq('id', state["event_id"]).execute()
                    
                    if response.data and len(response.data) > 0:
                        success_text = f"""üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üÜî ID: {state["event_id"]}
üìù {state["event_data"]["title"]}
üìã {state["event_data"]["description"]}
üìÖ {format_thai_date(event_date_str)}

‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
                        
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                            )
                        )
                    else:
                        safe_line_api_call(line_bot_api.reply_message,
                            ReplyMessageRequest(
                                reply_token=event.reply_token,
                                messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ", quick_reply=create_admin_quick_reply())]
                            )
                        )
                    
                    del user_states[user_id]
                    return
                    
                except Exception as e:
                    app.logger.error(f"Error editing event via guided flow: {e}")
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", quick_reply=create_admin_quick_reply())]
                        )
                    )
                    del user_states[user_id]
                    return
        
        # Handle cancel during guided flow (for all users)
        if user_id in user_states and text in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"]:
            current_step = user_states[user_id].get("step", "")
            del user_states[user_id]
            
            # Different cancel messages based on user type and action
            if user_id in admin_ids and current_step.startswith(("waiting_", "edit_")):
                cancel_msg = "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß"
                quick_reply = create_admin_quick_reply()
            else:
                cancel_msg = "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
                quick_reply = create_main_quick_reply()
            
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=cancel_msg, quick_reply=quick_reply)]
                )
            )
            return
        
        # Handle /notify command for quick notifications
        if text.startswith("/notify ") and user_id in admin_ids:
            custom_message = text[len("/notify "):].strip()
            
            try:
                # Send message to all subscribers
                subscribers_response = supabase_client.table('subscribers').select('user_id').execute()
                
                if subscribers_response.data:
                    sent_count = 0
                    failed_count = 0
                    
                    notification_text = f"""üì¢ {custom_message}

üì≤ ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"""
                    
                    for subscriber in subscribers_response.data:
                        try:
                            safe_line_api_call(line_bot_api.push_message,
                                PushMessageRequest(
                                    to=subscriber['user_id'],
                                    messages=[TextMessage(text=notification_text)]
                                )
                            )
                            sent_count += 1
                        except Exception as e:
                            app.logger.error(f"Failed to send notification via command to {subscriber['user_id']}: {e}")
                            failed_count += 1
                    
                    success_message = f"""üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üí¨ **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:** {custom_message}
‚úÖ **‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {sent_count} ‡∏Ñ‡∏ô
‚ùå **‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:** {failed_count} ‡∏Ñ‡∏ô

üìä **‡∏£‡∏ß‡∏°:** {sent_count + failed_count} ‡∏Ñ‡∏ô"""
                    
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=success_message, quick_reply=create_admin_quick_reply())]
                        )
                    )
                else:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", quick_reply=create_admin_quick_reply())]
                        )
                    )
            except Exception as e:
                app.logger.error(f"Error sending notification via command: {e}")
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", quick_reply=create_admin_quick_reply())]
                    )
                )
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö "‡∏ä‡∏∑‡πà‡∏≠ | ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        elif user_id in admin_ids and ' | ' in text and len(text.split(' | ')) == 3:
            parts = text.split(' | ')
            event_title = parts[0].strip()
            event_description = parts[1].strip()
            event_date_str = parts[2].strip()
            
            try:
                event_date = datetime.strptime(event_date_str, '%Y-%m-%d').date()
            except ValueError:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ YYYY-MM-DD", quick_reply=create_admin_quick_reply())]
                    )
                )
                return
            
            try:
                response = supabase_client.table('events').insert({
                    'event_title': event_title,
                    'event_description': event_description,
                    'event_date': str(event_date),
                    'created_by': event.source.user_id
                }).execute()
                
                if response.data and len(response.data) > 0:
                    event_id = response.data[0]['id']
                    success_text = f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìù {event_title}\nüìã {event_description}\nüìÖ {format_thai_date(str(event_date))}\nüÜî ID: {event_id}"
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=success_text, quick_reply=create_admin_quick_reply())]
                        )
                    )
                else:
                    safe_line_api_call(line_bot_api.reply_message,
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                        )
                    )
            except Exception as e:
                app.logger.error(f"Error adding event via simple format: {e}")
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=create_admin_quick_reply())]
                    )
                )
        
    # ==================== EVENT SEARCH COMMANDS ====================
    # Handle /search before contact management to avoid conflicts
    if text == "/search":
        # Start guided search flow
        user_states[event.source.user_id] = {"step": "search_menu"}
        
        # Create search menu buttons
        search_menu = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üìù ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")),
            QuickReplyItem(action=MessageAction(label="üìÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")),
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
            QuickReplyItem(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
        ])
        
        search_help = """üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

üî∏ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î** - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
üî∏ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà** - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
üî∏ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î** - ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=search_help, quick_reply=search_menu)]
            )
        )
        return

    # ==================== CONTACT MANAGEMENT COMMANDS ===================="
    
    # Handle show all contacts in Thai FIRST (before conversion)
    if text.lower() in ["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]:
        contacts = get_all_contacts()
        if not contacts:
            msg = "üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏™‡∏°‡∏∏‡∏î\n\nüí° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!"
            quick_reply = create_contact_quick_reply()
        else:
            msg = f"üìã ‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ({len(contacts)} ‡∏Ñ‡∏ô)\n\n"
            for i, contact in enumerate(contacts[:20], 1):
                msg += f"{i}. {contact['name']} - {contact['phone_number']}\n"
            if len(contacts) > 20:
                msg += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(contacts) - 20} ‡∏Ñ‡∏ô"
            msg += "\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π"
            quick_reply = create_contact_quick_reply()
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=msg, quick_reply=quick_reply)]
            )
        )
        return
    
    # Check for Thai natural language conversion
    converted_command = convert_thai_to_english_command(text)
    
    # Check for incomplete commands and provide help
    incomplete = detect_incomplete_command(converted_command)
    if incomplete:
        from linebot.v3.messaging import QuickReply, QuickReplyItem, MessageAction
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label=f"üí° {suggestion[:20]}", text=suggestion))
            for suggestion in incomplete["suggestions"][:10]
        ])
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=incomplete["message"], quick_reply=quick_reply)]
            )
        )
        return
    
    # Handle English commands (old format)
    elif text.startswith("add_phone "):
        data = text.replace("add_phone ", "")
        user_id = event.source.user_id
        handle_add_contact_simple(data, event, user_id)
    
    elif text.startswith("search_phone "):
        query = text.replace("search_phone ", "")
        handle_search_contact_simple(query, event)
    
    # Handle Thai commands (new format)
    elif converted_command.startswith("add_phone "):
        data = converted_command.replace("add_phone ", "")
        user_id = event.source.user_id
        handle_add_contact_simple(data, event, user_id)
    
    elif converted_command.startswith("search_phone "):
        query = converted_command.replace("search_phone ", "")
        handle_search_contact_simple(query, event)
    
    # Handle smart search menu
    elif text == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞":
        # Get stats for smart suggestions
        stats = get_contacts_stats()
        smart_help = f"""üîç **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞**

üìä **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
‚Ä¢ ‡∏£‡∏ß‡∏°: **{stats['total']}** ‡πÄ‡∏ö‡∏≠‡∏£‡πå
‚Ä¢ üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠: **{stats['mobile']}** ‡πÄ‡∏ö‡∏≠‡∏£‡πå  
‚Ä¢ ‚òéÔ∏è ‡∏ö‡πâ‡∏≤‡∏ô: **{stats['landline']}** ‡πÄ‡∏ö‡∏≠‡∏£‡πå
‚Ä¢ üïê ‡πÉ‡∏´‡∏°‡πà (30‡∏ß‡∏±‡∏ô): **{stats['recent']}** ‡πÄ‡∏ö‡∏≠‡∏£‡πå

üéØ **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:**
üì± **‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠** - ‡πÄ‡∏ö‡∏≠‡∏£‡πå 08x, 09x, 06x
‚òéÔ∏è **‡∏ö‡πâ‡∏≤‡∏ô** - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡πâ‡∏≤‡∏ô/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô  
üïê **‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î** - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
üìã **‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î** - ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤

üí° **‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=smart_help, quick_reply=create_smart_search_quick_reply())]
            )
        )
        return

    # Handle category search
    elif text.startswith("‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ") and text.split()[1] in ["mobile", "landline", "recent"]:
        category = text.split()[1]
        try:
            contacts = search_contacts_by_category(category, limit=20)
            
            if contacts:
                # Create flex message for contacts
                from contact_management import create_contact_flex_message
                flex_contents = []
                
                for contact in contacts[:12]:  # Show max 12 contacts
                    flex_contents.append(create_contact_flex_message(contact))
                
                flex_message = FlexMessage(
                    alt_text=f"‡∏û‡∏ö {len(contacts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                    contents=FlexContainer.from_dict({
                        "type": "carousel",
                        "contents": flex_contents
                    })
                )
                
                category_names = {
                    "mobile": "üì± ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠",
                    "landline": "‚òéÔ∏è ‡∏ö‡πâ‡∏≤‡∏ô", 
                    "recent": "üïê ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
                }
                
                result_text = f"üîç **{category_names[category]}** ‡∏û‡∏ö {len(contacts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                if len(contacts) == 20:
                    result_text += "\n\nüí° ‡πÅ‡∏™‡∏î‡∏á 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤"
                
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[flex_message, TextMessage(text=result_text, quick_reply=create_smart_search_quick_reply())]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ", quick_reply=create_smart_search_quick_reply())]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error in category search: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", quick_reply=create_contact_quick_reply())]
                )
            )
        return

    # Handle contact statistics
    elif text == "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå":
        try:
            stats = get_contacts_stats()
            
            stats_text = f"""üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£**

üìû **‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {stats['total']:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
üì± **‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠:** {stats['mobile']:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå
‚òéÔ∏è **‡∏ö‡πâ‡∏≤‡∏ô:** {stats['landline']:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå
üïê **‡πÉ‡∏´‡∏°‡πà (30 ‡∏ß‡∏±‡∏ô):** {stats['recent']:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå

üí° **‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£**"""
            
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=stats_text, quick_reply=create_smart_search_quick_reply())]
                )
            )
        except Exception as e:
            app.logger.error(f"Error getting stats: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", quick_reply=create_contact_quick_reply())]
                )
            )
        return
    
    # Handle export contacts (admin only)  
    elif text == "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå":
        if event.source.user_id not in admin_ids:
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(
                        text="‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                        quick_reply=create_contact_quick_reply()
                    )]
                )
            )
            return
        
        try:
            from contact_management import export_contacts_to_excel
            result = export_contacts_to_excel()
            
            if result["success"]:
                export_text = f"""üìÑ **‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£**

üìä **‡∏™‡∏£‡∏∏‡∏õ:**
‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå: {result['filename']}
‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î: {len(result['file'])//1024} KB

üí° **‡πÑ‡∏ü‡∏•‡πå Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß**
üìß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ"""

                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=export_text, quick_reply=create_contact_quick_reply())]
                    )
                )
            else:
                safe_line_api_call(line_bot_api.reply_message,
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(
                            text=f"‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î**\n{result['error']}",
                            quick_reply=create_contact_quick_reply()
                        )]
                    )
                )
        except Exception as e:
            app.logger.error(f"Error exporting contacts: {e}")
            safe_line_api_call(line_bot_api.reply_message,
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(
                        text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                        quick_reply=create_contact_quick_reply()
                    )]
                )
            )
        return

    # Show comprehensive quick reply menu
    elif text in ["‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°", "quick", "‡πÄ‡∏£‡πá‡∏ß"]:
        help_text = """üöÄ **‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå**
        
üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤, ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
üìû **‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå:** ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏´‡∏≤, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
üí° **‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢:** ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_comprehensive_quick_reply())]
            )
        )
        return
    
    # Show ALL commands menu
    elif text in ["‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "all", "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "commands"]:
        help_text = """üìù **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö**

üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤, ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
üìû **‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå:** ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏´‡∏≤, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥, ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠, ‡∏ö‡πâ‡∏≤‡∏ô
üë§ **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°, ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
üë®‚Äçüíº **Admin:** ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£, ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô, ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å

üí° **12 ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å ‡∏Å‡∏î‡πÄ‡∏•‡∏¢!**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_all_commands_quick_reply())]
            )
        )
        return
    
    # Show search commands only
    elif text in ["‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "search", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏´‡∏≤"]:
        help_text = """üîç **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**

üìÖ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
üìû **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:** ‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
üì± **‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠:** ‡πÄ‡∏ö‡∏≠‡∏£‡πå 08x, 09x, 06x
‚òéÔ∏è **‡∏ö‡πâ‡∏≤‡∏ô:** ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡πâ‡∏≤‡∏ô/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
üïê **‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

üí° **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ!**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_search_commands_quick_reply())]
            )
        )
        return
    
    # Show admin commands only (admin only)
    elif text in ["‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "admin commands", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"] and event.source.user_id in admin_ids:
        help_text = """üë®‚Äçüíº **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**

‚ûï **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
‚öôÔ∏è **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö
üì¢ **‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
üìã **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:** ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
üìû **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå:** ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
üìÑ **‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå:** ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel
üìä **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:** ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

üíº **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_admin_all_commands_quick_reply())]
            )
        )
        return
    
    # Show date commands only
    elif text in ["‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "date", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"]:
        help_text = """üìÖ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**

üìÖ **‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:** ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
üîú **‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ  
üìÜ **‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:** ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
üìã **‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** 5/10/20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

üí° **‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö!**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_date_commands_quick_reply())]
            )
        )
        return

    # Handle main help command 
    elif text.lower() in ["help", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", "?", "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠"]:
        help_text = """üí° **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LINE Bot**

üìù **Quick Reply ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**
‚Ä¢ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î** - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 12 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å
‚Ä¢ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤** - ‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
‚Ä¢ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà** - ‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
‚Ä¢ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô** - ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
‚Ä¢ **‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°** - ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ

üìÖ **‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:**
‚Ä¢ /today, /next, /month, /search, ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

üìû **‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå:**
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå

üë§ **‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**
‚Ä¢ /subscribe - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

üéØ **‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!**"""
        
        # Create help quick reply with all menu options
        help_quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", text="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")),
            QuickReplyItem(action=MessageAction(label="üìÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", text="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")),
            QuickReplyItem(action=MessageAction(label="üöÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°", text="‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏ß‡∏°")),
            QuickReplyItem(action=MessageAction(label="üè† ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))
        ])
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=help_quick_reply)]
            )
        )
        return

    # Handle help command in Thai
    elif text.lower() in ["‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå", "help ‡πÄ‡∏ö‡∏≠‡∏£‡πå"]:
        help_text = """üìû **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

**‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ 081-234-5678  
**‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
**‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:** ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üí° **‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**"""
        
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=help_text, quick_reply=create_contact_quick_reply())]
            )
        )
        return
    
    # Handle admin contact commands (disabled - function not implemented)
    # elif handle_admin_commands(text, event, line_bot_api, admin_ids, create_admin_quick_reply):
    #     pass  # Command was handled by handle_admin_commands
    
    # ==================== END CONTACT MANAGEMENT ====================
    
    else:
        safe_line_api_call(line_bot_api.reply_message,
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {text}\n\n‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö\n\nüìû **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡∏°‡πà:**\n‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå\n‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ - ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå\n‚Ä¢ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå - ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\nüí° **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°:**\n‚Ä¢ add_phone, search_phone ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", quick_reply=create_main_quick_reply())]
            )
        )

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
