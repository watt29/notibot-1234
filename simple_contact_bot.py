# -*- coding: utf-8 -*-
"""
Simple Contact Bot - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏Ñ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
"""

from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, ReplyMessageRequest,
    TextMessage, FlexMessage, FlexContainer, QuickReply, QuickReplyItem,
    MessageAction
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent
import os
from dotenv import load_dotenv
from contact_management import (
    add_contact, search_contacts_multi_keyword, create_contact_flex_message
)
from easy_commands import convert_thai_to_english_command, create_help_message, create_thai_contact_menu
from smart_helper import detect_incomplete_command, analyze_user_intent, format_error_message

load_dotenv()

app = Flask(__name__)

# Initialize LINE Bot
configuration = Configuration(access_token=os.getenv('LINE_CHANNEL_ACCESS_TOKEN'))
handler = WebhookHandler(os.getenv('LINE_CHANNEL_SECRET'))
line_bot_api = MessagingApi(ApiClient(configuration))

@app.route("/", methods=['GET'])
def home():
    return "Simple Contact Bot is ready! ü§ñüìû"

@handler.add(MessageEvent, message=TextMessageContent)
def handle_simple_message(event):
    text = event.message.text.strip()
    user_id = event.source.user_id
    
    # Welcome messages
    if text.lower() in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi", "start"]:
        welcome_msg = """ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£

üìû **‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å:**
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå

üéØ **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678  
‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢
‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå 081

‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! üëá"""
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=welcome_msg, quick_reply=create_thai_contact_menu())]
            )
        )
        return
    
    # Help command
    if text.lower() in ["‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ä‡πà‡∏ß‡∏¢", "help"]:
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=create_help_message(), quick_reply=create_thai_contact_menu())]
            )
        )
        return
    
    # Convert Thai natural language to English commands
    converted_command = convert_thai_to_english_command(text)
    
    # Check for incomplete commands
    incomplete = detect_incomplete_command(converted_command)
    if incomplete:
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label=f"üí° {suggestion[:20]}", text=suggestion))
            for suggestion in incomplete["suggestions"]
        ])
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=incomplete["message"], quick_reply=quick_reply)]
            )
        )
        return
    
    # Handle add contact
    if converted_command.startswith("add_phone "):
        handle_add_simple(converted_command.replace("add_phone ", ""), event, user_id)
        return
    
    # Handle search contact  
    if converted_command.startswith("search_phone "):
        handle_search_simple(converted_command.replace("search_phone ", ""), event)
        return
    
    # Show all contacts (simple version)
    if text.lower() in ["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]:
        handle_list_simple(event)
        return
    
    # Default response with suggestions
    intent = analyze_user_intent(text)
    
    if intent["context"] == "contact":
        suggestion_msg = """ü§î ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ

üí° **‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:**
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
‚Ä¢ ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

üéØ **‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á**"""
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=suggestion_msg, quick_reply=create_thai_contact_menu())]
            )
        )
    else:
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏∞ üìû")]
            )
        )

def handle_add_simple(data, event, user_id):
    """Handle add contact with simple interface"""
    parts = data.strip().split()
    
    if len(parts) < 2:
        error_msg = format_error_message("missing_name")
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ 081-234-5678")),
            QuickReplyItem(action=MessageAction(label="üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏î‡∏≤‡∏ß 089-999-8888", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏î‡∏≤‡∏ß 089-999-8888"))
        ])
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=error_msg, quick_reply=quick_reply)]
            )
        )
        return
    
    name = parts[0]
    phone = parts[1]
    
    result = add_contact(name, phone, user_id)
    
    if result["success"]:
        contact_data = result["data"]
        success_msg = f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n\nüìù ‡∏ä‡∏∑‡πà‡∏≠: {contact_data['name']}\nüìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {contact_data['phone_number']}\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡∏π: ‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå {name}"
        
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ", text=f"‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå {name}")),
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"))
        ])
    else:
        success_msg = format_error_message("invalid_phone" if "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" in result["error"] else "duplicate")
        quick_reply = create_thai_contact_menu()
    
    line_bot_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[TextMessage(text=success_msg, quick_reply=quick_reply)]
        )
    )

def handle_search_simple(query, event):
    """Handle search with simple interface"""
    contacts = search_contacts_multi_keyword(query)
    
    if not contacts:
        error_msg = format_error_message("not_found")
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üîç ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")),
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå "))
        ])
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=error_msg, quick_reply=quick_reply)]
            )
        )
        return
    
    if len(contacts) == 1:
        # Single result - show detailed
        contact = contacts[0]
        flex_content = create_contact_flex_message(contact, is_single=True)
        flex_message = FlexMessage(alt_text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", contents=FlexContainer.from_dict(flex_content))
        
        success_msg = f"üéØ ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ({len(contacts)} ‡∏Ñ‡∏ô)\n\nüí° ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?"
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"))
        ])
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message, TextMessage(text=success_msg, quick_reply=quick_reply)]
            )
        )
    else:
        # Multiple results - show carousel
        bubbles = [create_contact_flex_message(contact) for contact in contacts[:10]]
        carousel_content = {"type": "carousel", "contents": bubbles}
        flex_message = FlexMessage(alt_text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", contents=FlexContainer.from_dict(carousel_content))
        
        success_msg = f"üéØ ‡∏û‡∏ö {len(contacts)} ‡∏Ñ‡∏ô{' (‡πÅ‡∏™‡∏î‡∏á 10 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å)' if len(contacts) > 10 else ''}\n\nüí° ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏´‡∏°?"
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìã ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"))
        ])
        
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[flex_message, TextMessage(text=success_msg, quick_reply=quick_reply)]
            )
        )

def handle_list_simple(event):
    """Handle list all contacts with simple interface"""
    from contact_management import get_all_contacts
    
    contacts = get_all_contacts()
    
    if not contacts:
        msg = "üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏™‡∏°‡∏∏‡∏î\n\nüí° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!"
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏Å", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå "))
        ])
    else:
        # Show summary
        msg = f"üìã ‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ({len(contacts)} ‡∏Ñ‡∏ô)\n\n"
        for i, contact in enumerate(contacts[:20], 1):
            msg += f"{i}. {contact['name']} - {contact['phone_number']}\n"
        
        if len(contacts) > 20:
            msg += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(contacts) - 20} ‡∏Ñ‡∏ô"
        
        msg += "\n\nüí° ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π"
        
        quick_reply = QuickReply(items=[
            QuickReplyItem(action=MessageAction(label="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", text="‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå ")),
            QuickReplyItem(action=MessageAction(label="üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå "))
        ])
    
    line_bot_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[TextMessage(text=msg, quick_reply=quick_reply)]
        )
    )

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)